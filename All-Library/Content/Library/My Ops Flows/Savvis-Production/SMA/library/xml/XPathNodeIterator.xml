<?xml version="1.0" encoding="UTF-8"?>
<operation id="2bd8ae70-2a75-45ec-8c53-825bc8523dbe">
  <descriptionCdata><![CDATA[2bd8ae70-2a75-45ec-8c53-825bc8523dbe.description=<pre>Evaluates the given 'expression' and returns the results in a form of an Iterator. The node iterator is designed to operate against XML nodes only and will return the XML corresponding with the node.  The primary advantage over the built in XPathEvaluator is that this iterator is not a one time iterator, if the XML is changed the iterator will reset\n\nInputs\:\nxml - The xml (in the form of a String).\nxpathExpression - The XPath expression to evaluate.\n\nResponses\:\nhas more - Another result was in the list, and has been returned.\nfailure - Something went wrong.\nno more - No more results. This will only be returned once, then iteration restarts.\n\nReturns\:\nreturnResult - Result evaluated from the XPath string provided.\nattributeName - If an attribute is returned, the name of the attribute.\ntype - The type of the result.</pre>
]]></descriptionCdata>
  <annotation>2bd8ae70-2a75-45ec-8c53-825bc8523dbe.description</annotation>
  <name>XPathNodeIterator</name>
  <categories/>
  <inputs>
    <userInputBinding id="4927d690-7d87-44fe-93b0-9cc4c1e86ec8">
      <annotation></annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>xml</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt></prompt>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="fcd5a41c-4aec-4ed8-99eb-896fca925036">
      <annotation></annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>expression</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt></prompt>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
  </inputs>
  <scriptlet id="7485a0d6-12bd-4adf-a563-f89e95b47442">
    <annotation></annotation>
    <name>Operation:XPathNodeIterator (19fac148-1779-4e15-9ad1-ede58d932278)</name>
    <script>scriptletResponse = &quot;failure&quot;; 
var indexSuffix = &apos;.INDEX&apos;;
var nodeListSuffix = &apos;.NODELIST&apos;;	
var keyPrefix = &apos;XPathNodeIterator.&apos;;
// by hashing the xml and the xpath expression together and using 
// it as part of the key we can have multiple iterators in the same 
// flow without conflict, there is a performance penalty for this flexibility
var digest = java.security.MessageDigest.getInstance(&quot;MD5&quot;);
digest.update((new java.lang.String(expression)).getBytes());
var bytes = digest.digest((new java.lang.String(xml)).getBytes());
keyPrefix += (new java.math.BigInteger(1, bytes)).toString(16);
var index = 0;
var nodeList = scriptletContext.get(keyPrefix + nodeListSuffix);
if (nodeList == null) {
    var xpath = javax.xml.xpath.XPathFactory.newInstance().newXPath();
    nodeList = xpath.evaluate(expression, new org.xml.sax.InputSource(new java.io.StringReader(xml)), 
        javax.xml.xpath.XPathConstants.NODESET);
    scriptletContext.put(keyPrefix + nodeListSuffix, nodeList);
} else {
    index = scriptletContext.get(keyPrefix + indexSuffix);
}
var count = nodeList.getLength();
// we dump the node count if anyone cares
scriptletContext.put(&apos;count&apos;, count);
if (index &lt; count) {  // we still have nodes to iterate through
    // we output the XML of each node iteration in the result
    var node = nodeList.item(index);
    var transformer = javax.xml.transform.TransformerFactory.newInstance().newTransformer();
    transformer.setOutputProperty(javax.xml.transform.OutputKeys.OMIT_XML_DECLARATION, &quot;yes&quot;);
    transformer.setOutputProperty(javax.xml.transform.OutputKeys.INDENT, &quot;no&quot;);
    transformer.setOutputProperty(javax.xml.transform.OutputKeys.METHOD, &quot;xml&quot;);
    var sw = new java.io.StringWriter();
    transformer.transform(new javax.xml.transform.dom.DOMSource(node), 
        new javax.xml.transform.stream.StreamResult(sw));
    scriptletContext.put(keyPrefix + indexSuffix, ++index);
    scriptletResponse = &quot;has more&quot;;
    scriptletResult = sw.toString();
} else { // we&apos;ve finished looping through results so we cleanup
    scriptletContext.put(keyPrefix + indexSuffix, null);
    scriptletContext.put(keyPrefix + nodeListSuffix, null);
    scriptletResponse = &quot;no more&quot;; 
    scriptletResult = &quot;&quot;;
}</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="e3001cd9-50be-4edb-ba21-d742e48f8266">
      <annotation></annotation>
      <name>failure</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules/>
    </opResponse>
    <opResponse id="7ce44c00-4b9d-4560-b0fb-1fdf7653283e">
      <annotation></annotation>
      <name>no more</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>NO_ACTION_TAKEN</type>
      <matchRules/>
    </opResponse>
    <opResponse id="54176a9c-034b-44fe-99af-37962f9a998b">
      <annotation></annotation>
      <name>has more</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>NO_ACTION_TAKEN</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="217f72fd-525b-4741-882f-30543517a90f">
    <annotation></annotation>
    <name>Field 1</name>
    <fieldName>Field_1</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="b6d62704-3541-4926-a96a-a2af571a69f8">
    <baseIcon>text_code_javascript.png</baseIcon>
    <basePath>/Others/</basePath>
    <readOnly>false</readOnly>
    <layers/>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
</operation>