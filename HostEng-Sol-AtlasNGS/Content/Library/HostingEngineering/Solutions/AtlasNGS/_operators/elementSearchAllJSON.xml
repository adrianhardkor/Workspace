<?xml version="1.0" encoding="UTF-8"?>
<operation id="0b189871-017e-4817-92f4-bc8e5d37dfd2">
  <descriptionCdata><![CDATA[0b189871-017e-4817-92f4-bc8e5d37dfd2.description=<pre>\nSnopsis\: Scriptlet that grabs all keys and out puts only keys that have Local values.  This is to emulate an ARGV type functionality.  Will only provide inputs of direct flow calling this operation.\n\nInputs\: None\n\nResults\:\nAll local variables in argv format\: "index1\=value1 index2\=value2a+value2b index3\=value3a,value3b,value3c..."\nInternal variables that can be potentially disregaurded\: (example was runCLU)\nusername\nexecution_thread_id\nRS_Previous_Transition\nwebserviceHost\nerrorDetails\nResult\nRS_Previous_Response\npassword\nflowUuid\nwebservicePort\n\nResponses\:\nfailure - Something went wrong\nsuccess - Built argv list\n</pre>
]]></descriptionCdata>
  <annotation>0b189871-017e-4817-92f4-bc8e5d37dfd2.description</annotation>
  <name>elementSearchAllJSON</name>
  <categories/>
  <inputs>
    <userInputBinding id="d45541e4-8804-4c04-9737-fe8f000cf9fc">
      <annotation></annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>array</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt></prompt>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="daa8a52c-7d9b-408e-971d-f0d283d5f3b4">
      <annotation></annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>key</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt></prompt>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
  </inputs>
  <scriptlet id="836b9eb2-b1c1-48ad-a729-61ae48b7a641">
    <annotation></annotation>
    <name>Operation:elementSearchAllJSON (0b189871-017e-4817-92f4-bc8e5d37dfd2)</name>
    <script>// One-liner to define JSON parser and stringifier.  Minified version of http://www.json.org/json2.js
if(!this.JSON){this.JSON={};}(function(){function f(n){return n&lt;10?&apos;0&apos;+n:n;} if(typeof Date.prototype.toJSON!==&apos;function&apos;){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+&apos;-&apos;+ f(this.getUTCMonth()+1)+&apos;-&apos;+f(this.getUTCDate())+&apos;T&apos;+f(this.getUTCHours())+&apos;:&apos;+f(this.getUTCMinutes())+&apos;:&apos;+f(this.getUTCSeconds())+&apos;Z&apos;:null;};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();};} var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\&quot;\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={&apos;\b&apos;:&apos;\\b&apos;,&apos;\t&apos;:&apos;\\t&apos;,&apos;\n&apos;:&apos;\\n&apos;,&apos;\f&apos;:&apos;\\f&apos;,&apos;\r&apos;:&apos;\\r&apos;,&apos;&quot;&apos;:&apos;\\&quot;&apos;,&apos;\\&apos;:&apos;\\\\&apos;},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?&apos;&quot;&apos;+string.replace(escapable,function(a){var c=meta[a];return typeof c===&apos;string&apos;?c:&apos;\\u&apos;+(&apos;0000&apos;+a.charCodeAt(0).toString(16)).slice(-4);})+&apos;&quot;&apos;:&apos;&quot;&apos;+string+&apos;&quot;&apos;;} function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&amp;&amp;typeof value===&apos;object&apos;&amp;&amp;typeof value.toJSON===&apos;function&apos;){value=value.toJSON(key);}if(typeof rep===&apos;function&apos;){value=rep.call(holder,key,value);} switch(typeof value){case&apos;string&apos;:return quote(value);case&apos;number&apos;:return isFinite(value)?String(value):&apos;null&apos;;case&apos;boolean&apos;:case&apos;null&apos;:return String(value);case&apos;object&apos;:if(!value){return&apos;null&apos;;}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)===&apos;[object Array]&apos;){length=value.length;for(i=0;i&lt;length;i+=1){partial[i]=str(i,value)||&apos;null&apos;;} v=partial.length===0?&apos;[]&apos;:gap?&apos;[\n&apos;+gap+partial.join(&apos;,\n&apos;+gap)+&apos;\n&apos;+mind+&apos;]&apos;:&apos;[&apos;+partial.join(&apos;,&apos;)+&apos;]&apos;;gap=mind;return v;}if(rep&amp;&amp;typeof rep===&apos;object&apos;){length=rep.length;for(i=0;i&lt;length;i+=1){k=rep[i];if(typeof k===&apos;string&apos;){v=str(k,value);if(v){partial.push(quote(k)+(gap?&apos;: &apos;:&apos;:&apos;)+v);}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?&apos;: &apos;:&apos;:&apos;)+v);}}}} v=partial.length===0?&apos;{}&apos;:gap?&apos;{\n&apos;+gap+partial.join(&apos;,\n&apos;+gap)+&apos;\n&apos;+ mind+&apos;}&apos;:&apos;{&apos;+partial.join(&apos;,&apos;)+&apos;}&apos;;gap=mind;return v;}} if(typeof JSON.stringify!==&apos;function&apos;){JSON.stringify=function(value,replacer,space){var i;gap=&apos;&apos;;indent=&apos;&apos;;if(typeof space===&apos;number&apos;){for(i=0;i&lt;space;i+=1){indent+=&apos; &apos;;}}else if(typeof space===&apos;string&apos;){indent=space;} rep=replacer;if(replacer&amp;&amp;typeof replacer!==&apos;function&apos;&amp;&amp;(typeof replacer!==&apos;object&apos;||typeof replacer.length!==&apos;number&apos;)){throw new Error(&apos;JSON.stringify&apos;);} return str(&apos;&apos;,{&apos;&apos;:value});};} if(typeof JSON.parse!==&apos;function&apos;){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&amp;&amp;typeof value===&apos;object&apos;){for(k in value){if(Object.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}} return reviver.call(holder,key,value);} text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return&apos;\\u&apos;+ (&apos;0000&apos;+a.charCodeAt(0).toString(16)).slice(-4);});} if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:[&quot;\\\/bfnrt]|u[0-9a-fA-F]{4})/g,&apos;@&apos;).replace(/&quot;[^&quot;\\\n\r]*&quot;|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,&apos;]&apos;).replace(/(?:^|:|,)(?:\s*\[)+/g,&apos;&apos;))){j=eval(&apos;(&apos;+text+&apos;)&apos;);return typeof reviver===&apos;function&apos;?walk({&apos;&apos;:j},&apos;&apos;):j;} throw new SyntaxError(&apos;JSON.parse&apos;);};}}());

// default response
scriptletResponse = &quot;failure&quot;;
//inputs: &quot;array&quot; , &quot;key&quot;


//CAUTION!!! -- THIS ASSUMES A SIMPLE ARRAY CONTAINING THE KEY YOU WANT IN EACH ITERATION -- IT DOES NOT DIVE INTO NESTED ARRAYS OR OTHER OBJECTS
try {

    // Interpret array as a javascript array
    jsArray = JSON.parse(array);
    var myOutputList = [];
    if (typeof(jsArray) == &quot;object&quot;) {
        for (var z = 0; z &lt; jsArray.length; z++) {    
            thing = jsArray[z];
            result = getValue(thing, key);
            myOutputList.push(result)
            }
    } else {
        scriptletResult = &quot;Not an Array&quot;;
        scriptletResponse = &quot;failure&quot;;
    }
    scriptletResult = myOutputList.join(&quot;,&quot;);
    scriptletResponse = &quot;success&quot;;

} catch(e if e.name == &quot;SyntaxError&quot;){
    scriptletResult = &quot;input value is not a valid JavaScript array&quot;;
} catch (e){
    scriptletResult = &quot;&quot;+e;
}

function getValue(obj, aKey) {
    keyString = new String(aKey);  
    
    //non JSON array object
    if (!keyString.match(&quot;.*\[[0-9]+]$&quot;)){
        if (aKey in obj)
            return obj[keyString];
        else
           throw &quot;DEBUG key does not exist in JavaScript object.&quot;;
    }
    //JSON array object
    else{   
        startIndex = keyString.indexOf(&quot;[&quot;);
        endIndex = keyString.indexOf(&quot;]&quot;);   
        oneKey = keyString.substring(0,startIndex);
        index = keyString.substring(startIndex+1, endIndex);
        if (oneKey in obj){
            subObject = obj[oneKey];
            if (subObject instanceof Array){
                 if ( (index &gt;= subObject.length)  || (index &lt; 0) ) 
                    throw &quot;index is out of range&quot;;
                 else return subObject[index];  
             }
             else throw &quot;key does not exist in JavaScript object.&quot;;
        }
        else
           throw &quot;key does not exist in JavaScript object.&quot;; 
    }
}</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="4e40b4ba-5a9e-4a4d-b873-8fdc838fbb56">
      <annotation></annotation>
      <name>success</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
    <opResponse id="950729d4-c6e8-4d79-944d-07bd5058c198">
      <annotation></annotation>
      <name>failure</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="8356ac02-a4dc-428f-bd01-1d2288c70a78">
    <annotation></annotation>
    <name>Field 1</name>
    <fieldName>Field_1</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="e9cc8bda-dd22-43a2-b5b8-c4993a58ddc7">
    <baseIcon>scriptlet.png</baseIcon>
    <basePath>System</basePath>
    <readOnly>false</readOnly>
    <layers/>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
</operation>