<?xml version="1.0" encoding="UTF-8"?>
<operation id="8d4ff82b-7ee1-46d0-9b9e-44e94d0c492f">
  <descriptionCdata><![CDATA[8d4ff82b-7ee1-46d0-9b9e-44e94d0c492f.description=<pre>Operation to check for valid IP address formats.\n\nInputs\:\n\ninputList\:  comma seperated list of variables to check\n\nReponsses\:\ninvalid\:  at least one variable is null or has invalid IP format\nvalid\:  all variables have a valid IP formatted value\n\nResult\:  List of variables that are null or invalid\n\n</pre>
]]></descriptionCdata>
  <annotation>8d4ff82b-7ee1-46d0-9b9e-44e94d0c492f.description</annotation>
  <name>checkForValidWwns</name>
  <categories/>
  <inputs>
    <staticBinding id="20060ed1-2ac2-4175-8c19-281687400d6a">
      <annotation></annotation>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>inputList</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <value></value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="244af5c8-9768-4b05-b04d-20c048d24fa3">
      <annotation></annotation>
      <toContextKey></toContextKey>
      <fromContextKey></fromContextKey>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey></recordKey>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_1</inputSymbol>
      <listDelimiter></listDelimiter>
      <value>${inputList}</value>
      <record>false</record>
    </staticBinding>
  </inputs>
  <scriptlet id="00f3105c-ab18-4e6b-957e-0857226c7379">
    <annotation></annotation>
    <name>Operation:checkForValidWwns (8d4ff82b-7ee1-46d0-9b9e-44e94d0c492f)</name>
    <script>var myValues = scriptletContext.get(inputList);
var mySplitValues = myValues.split(&quot;,&quot;);
var myInvalidResult = &quot;&quot;;
for (var i = 0; i &lt; mySplitValues.length; i++) {
	if (mySplitValues[i] == null || trim(mySplitValues[i])==&quot;&quot;)
		myInvalidResult += mySplitValues[i] + &quot; is Null\n&quot;;
    else if (!(mySplitValues[i].match(/^[0-9a-f][0-9a-f][:-][0-9a-f][0-9a-f][:-][0-9a-f][0-9a-f][:-][0-9a-f][0-9a-f][:-][0-9a-f][0-9a-f][:-][0-9a-f][0-9a-f][:-][0-9a-f][0-9a-f][:-][0-9a-f][0-9a-f]$/)))
        myInvalidResult += mySplitValues[i] + &quot; is invalid\n&quot;    
}

if (myInvalidResult.length &gt; 0) {
	scriptletResponse = &quot;invalid&quot;; 
	scriptletResult = myInvalidResult;}
else
	scriptletResponse = &quot;valid&quot;;
		
function trim(value){
var s = &quot;&quot;+value;
s.replace(/^\s*|\s*$/g, &quot;&quot;)
return s;
}</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="4645df75-2227-4c4e-bd47-6308484e7191">
      <annotation></annotation>
      <name>valid</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
    <opResponse id="8aa1624e-2746-406a-aae6-9a6ad1686bf7">
      <annotation></annotation>
      <name>invalid</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="a2ed3da4-05cb-492b-9bec-b99f729693ff">
    <annotation></annotation>
    <name>Field 1</name>
    <fieldName>Field_1</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="438c031f-7ef8-422d-8109-d7f5b2f01e4f">
    <baseIcon>text_code_javascript.png</baseIcon>
    <basePath>/Others/</basePath>
    <readOnly>false</readOnly>
    <layers/>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
</operation>